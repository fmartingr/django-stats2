{
  "name": "Django-stats2",
  "tagline": "Statistics for your models",
  "body": "django-stats2\r\n=============\r\n\r\n[![Build Status](https://travis-ci.org/fmartingr/django-stats2.svg?branch=master)](https://travis-ci.org/fmartingr/django-stats2)\r\n\r\nEasily create custom stats for your models.\r\n\r\n> **NOTE** Development not finished.\r\n\r\n# Usage\r\n\r\n## Installation\r\n\r\n```\r\npip install django_stats2\r\n```\r\n\r\n## Configuration\r\n\r\n``` python\r\n# models.py\r\nfrom django.db import models\r\n\r\nfrom django_stats2.mixins import StatsMixin\r\nfrom django_stats2.fields import StatField\r\n\r\n\r\nclass MyModel(StatsMixin, models.Model):\r\n     # ... your fields here\r\n\r\n     read_count = StatField()\r\n```\r\n\r\n## Settings\r\n``` python\r\n# Prefix for the cache keys\r\nSTATS2_CACHE_PREFIX = 'stats2'\r\n\r\n# Cache key from settings.CACHES\r\nSTATS2_CACHE_KEY = 'default'\r\n\r\n# Cache-Database interaction\r\n# Can't be the same setting, if cache is disabled, database direct\r\n# insert should be enabled (otherwise your stats would't be stored!)\r\nSTATS2_USE_CACHE = True\r\n\r\nSTATS2_DDBB_DIRECT_INSERT = False\r\n\r\n# Cache timeouts for the key types\r\n# Cache timeout for the totals\r\nSTATS2_CACHE_TIMEOUT_TOTAL = None\r\n\r\n# Cache timeout for a certain date\r\nSTATS2_CACHE_TIMEOUT_HISTORY = None\r\n\r\n# Cache timeout for between dates\r\nSTATS2_CACHE_TIMEOUT_BETWEEN = 60*60*24\r\n\r\n```\r\n\r\n> **NOTE ON CACHES:** While stats2 does it's own cache removal, the `between` cache key can't be invalidated due to the app architecture and django limitations, so keep in mind that if the `CACHE_TIMEOUT_BETWEEN` is `None` those keys will **never be invalidated**.\r\n\r\n## Usage\r\n\r\n``` python\r\nfrom datetime import date\r\nfrom myapp.models import MyModel\r\n\r\nobj = MyModel.objects.first()\r\n\r\n# Now we can access the Stat using\r\nobj.read_count # Returns str(stat)\r\nobj.read_count.get([date]) # Returns int stat, returns total if date not present\r\nobj.read_count.total()  # Same as before but returns int\r\nobj.read_count.get_for_date(date)  # Return stat for a current date (same as .get(date))\r\nobj.read_count.get_between_date(date_start, date_end)  # Between two dates\r\nobj.read_count.incr(value=1, date=date.today())  # Increment stat by amount\r\nobj.read_count.decr(value=1, date=date.today())  # Decrement stat by amount\r\nobj.read_count.set(value=1, date=date.today())  # Set a fixed amount\r\nobj.read_count.store(value=1, date=date.today())  # Force store value in database\r\n```\r\n\r\n# Contribute\r\n\r\nThe project provides a sample project to play with the stats2 app, just create a virtualenv, install django and start coding.\r\n\r\n```\r\nvirtualenv -p python3.5 .virtualenv\r\nsource .virtualenv/bin/activate\r\npip install django\r\ncd sampleproject\r\n```\r\n\r\n# Tests\r\n\r\n`tox` is used to perform test on different platforms, just install `tox` and run the command.\r\n\r\nKeep in mind that this create virtualenv for different python versions, you need to have all the interpreters available to perform the tests on the entire depencency environments.\r\n\r\n```\r\npip install tox\r\ntox\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}